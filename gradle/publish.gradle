apply plugin: 'maven-publish'
apply plugin: 'signing'

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (ignored) {
    // No local.properties file in CI
}

def mavenPublishUrl = System.getenv('MAVEN_PUBLISH')
        ?: properties.getProperty("maven.url")
        ?: run { throw new Exception("Could not find maven.url") }

def mavenPublishUser = System.getenv('MAVEN_PUBLISH_USER')
        ?: properties.getProperty("takrepo.user")
        ?: run { throw new Exception("Could not find takrepo.user") }

def mavenPublishPassword = System.getenv('MAVEN_PUBLISH_PASSWORD')
        ?: properties.getProperty("takrepo.password")
        ?: run { throw new Exception("Could not find takrepo.password") }

publishing {
    publications.all {
        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    publications {
        kotlinMultiplatform {
            artifactId = POM_ARTIFACT_ID
        }

        jvm {
//            artifact(javadocJar)
        }
    }

    repositories {
        maven {
            url mavenPublishUrl
            credentials {
                username = mavenPublishUser
                password = mavenPublishPassword
            }
        }
    }
}

//signing {
//    def signingKey = System.env.SIGNING_KEY
//    def signingPassword = ""
//    useInMemoryPgpKeys(signingKey, signingPassword)
//    publishing.publications.all {
//        sign it
//    }
//}
